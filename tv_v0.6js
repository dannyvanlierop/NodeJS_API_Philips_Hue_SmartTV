/***************************************************************************************************
*   Info:                                                                                          *
*                                                                                                  *
*   Tested on Philips Smart Tv (55PFS8209/12)                                                      *
*                                                                                                  *
*   TODO's:                                                                                        *
*          - Full Test                                                                             *
*          - DEBUG COPYPASTE: http://192.168.0.97:1925/5/audio/volume                              *
*          - Merge oDb.system.timestamp and oDb.system.epgsource to oDb.system                     *
*          - values for pointer                                                                    *
*   	                                                                                             *
*   INCLUDE:                                                                                       *
*   	     - tv = require( path + './tv.js' );                                                     *
*   	                                                                                             *
*   GET:                                                                                           *
*          - returnJSONObj (path)                                                                  *
*          - console.log(tv.getJSON('/5/activities/tv'));                                          *
*          - console.log(tv.returnActivitiesTv().channelList);                                     *
*                                                                                                  *
*   POST:                                                                                          *
*          - pushBufferobj (path, jObj, callback)                                                  *
*          - tv.pushBufferobjInputKeyVolumeDown();                                                 *
*          - tv.pushBufferobj('/5/input/key', { "key": "VolumeDown" });                            *
*                                                                                                  *
*   JSON:                                                                                          *
*          - Collect:                                                                              *
*              tv.returnJSONObjAll());                                                             *
*          - Write to file:                                                                        *
*              tv.returnJSONObjAllToDb();                                                          *
*   	     - Read from file:                                                                       *
*              console.log(fs.readFileSync( pathprivate + "./db.json", 'UTF8'));                   *
*                                                                                                  *
*  DEPENDENCY:                                                                                     *
*          - independent (only Node.js Built-in Modules)                                           *
*   	                                                                                             *
*                                                                                                  *
***************************************************************************************************/
//var request = require("request");
var fs = require("fs");
var http = require("http");
//var parallel = 10;
//var agent = new http.Agent({maxSockets: parallel});

var tv = require("./tv.js");

var oDb = {};
var result = [];

const proto = 'http://';
const host1 = 'httpbin.org';
const port1 = 80
const path1 = '/ip'

const host2 = '192.168.0.97';
const port2 = 1925;
const path2 = '/5/audio/volume';

result[0]='';
counter = 0;
/******************\
| Predefined Paths |###############################################################################################################################################################################
|
| These paths are tested, still searching for other available parths
|
\*************************************************************************************************************************************************************************************************/
var sArrayPaths = [];
 sArrayPaths[0]=undefined;                                        //   EMPTY
 sArrayPaths[1]='/5/activities/tv';                               // GET -      // {"channelList":{"id":"alltv","version":"60"},"channel":{"name":"NPO 1 HD","preset":1,"ccid":1000147}}
 sArrayPaths[2]='/5/ambilight/cached';                            // GET - POST // {"layer1":{"bottom":{"0":{"b":0,"g":0,"r":0},"1":{"b":0,"g":0,"r":0}},"right":{"0":{"b":0,"g":0,"r":0},"1":{"b":0,"g":0,"r":0},"2":{"b":0,"g":0,"r":0},"3":{"b":0,"g":0,"r":0}},"left":{"0":{"b":0,"g":0,"r":0},"1":{"b":0,"g":0,"r":0},"2":{"b":0,"g":0,"r":0},"3":{"b":0,"g":0,"r":0}},"top":{"0":{"b":0,"g":0,"r":0},"1":{"b":0,"g":0,"r":0},"2":{"b":0,"g":0,"r":0},"3":{"b":0,"g":0,"r":0},"4":{"b":0,"g":0,"r":0},"5":{"b":0,"g":0,"r":0},"6":{"b":0,"g":0,"r":0},"7":{"b":0,"g":0,"r":0}}}}
 sArrayPaths[3]='/5/ambilight/lounge';                            // GET - POST // {"speed":0,"colordelta":{"brightness":0,"saturation":0,"hue":0},"color":{"brightness":0,"saturation":0,"hue":0},"mode":"Default"}
 sArrayPaths[4]='/5/ambilight/measured';                          // GET -      // {"layer1":{"bottom":{"0":{"b":0,"g":0,"r":0},"1":{"b":0,"g":0,"r":0}},"right":{"0":{"b":0,"g":0,"r":0},"1":{"b":0,"g":0,"r":0},"2":{"b":0,"g":0,"r":0},"3":{"b":0,"g":0,"r":0}},"left":{"0":{"b":0,"g":0,"r":0},"1":{"b":0,"g":0,"r":0},"2":{"b":0,"g":0,"r":0},"3":{"b":0,"g":0,"r":0}},"top":{"0":{"b":0,"g":0,"r":0},"1":{"b":0,"g":0,"r":0},"2":{"b":0,"g":0,"r":0},"3":{"b":0,"g":0,"r":0},"4":{"b":0,"g":0,"r":0},"5":{"b":0,"g":0,"r":0},"6":{"b":0,"g":0,"r":0},"7":{"b":0,"g":0,"r":`10}}}}
 sArrayPaths[5]='/5/ambilight/mode';                              // GET - POST // 
 sArrayPaths[6]='/5/ambilight/processed';                         // GET -      // {"layer1":{"bottom":{"0":{"b":42,"g":0,"r":254},"1":{"b":42,"g":0,"r":254}},"right":{"0":{"b":42,"g":0,"r":254},"1":{"b":42,"g":0,"r":254},"2":{"b":42,"g":0,"r":254},"3":{"b":42,"g":0,"r":254}},"left":{"0":{"b":42,"g":0,"r":254},"1":{"b":42,"g":0,"r":254},"2":{"b":42,"g":0,"r":254},"3":{"b":42,"g":0,"r":254}},"top":{"0":{"b":42,"g":0,"r":254},"1":{"b":42,"g":0,"r":254},"2":{"b":42,"g":0,"r":254},"3":{"b":42,"g":0,"r":254},"4":{"b":42,"g":0,"r":254},"5":{"b":42,"g":0,"r":254},"6":{"b":42,"g":0,"r":254},"7":{"b":42,"g":0,"r":254}}}}
 sArrayPaths[7]='/5/ambilight/topology';                          // GET -      // {"bottom":2,"left":4,"right":4,"top":8,"layers":"1"}
 sArrayPaths[8]='/5/applications';                                // GET -      // {"applications":[{"id":"com.google.tv.netflix.NetflixActivity-com.google.tv.netflix","order":4,"intent":{"action":"#Intent;action=android.intent.action.MAIN;category=android.intent.category.LAUNCHER;launchFlags=0x10200000;component=com.google.tv.netflix/.NetflixActivity;end","component":{"packageName":"com.google.tv.netflix","className":"com.google.tv.netflix.NetflixActivity"}},"label":"Netflix"}],"version":8048} 
 sArrayPaths[9]='/5/audio/volume';                                // GET - POST // {"min":0,"current":20,"muted":true,"max":60}
sArrayPaths[10]='/5/channeldb/tv';                                // GET -      // {"favoriteLists":[],"channelLists":[{"id":"alltv","version":"60"}]} 
sArrayPaths[11]='/5/context';                                     // GET -      // {"data":"NA","level2":"Playstate","level3":"NA","level1":"WatchExtension"} 
sArrayPaths[12]='/5/input/key';                                   //     - POST // { "key": "VolumeUp" }       
sArrayPaths[13]='/5/input/pointer';                               //     - POST //      
sArrayPaths[14]='/5/network/devices';                             // GET -      // [{"wake-on-lan":"Disabled","type":"Wifi","id":"wifi0","mac":"30:10:B3:C0:AB:65"},{"wake-on-lan":"Enabled","id":"eth0","mac":"1B:5A:6C:7E:80:77","type":"Ethernet","ip":"192.168.0.97"}]   
sArrayPaths[15]='/5/powerstate';                                  // GET - POST // {"powerstate":"On"} or {"powerstate":"Standby"}   
sArrayPaths[16]='/5/system';                                      // GET -      // {"serialnumber_encrypted":"нєяєωιℓℓвєѕσмєєη¢яуρтє∂кєу=\n","nettvversion":"5.0.0","name":"wlan tv","model_encrypted":"нєяєωιℓℓвєѕσмєєη¢яуρтє∂кєу=\n","menulanguage":"Dutch","softwareversion_encrypted":"нєяєωιℓℓвєѕσмєєη¢яуρтє∂кєу=\n","deviceid_encrypted":"нєяєωιℓℓвєѕσмєєη¢яуρтє∂кєу=\n","country":"Netherlands"}
sArrayPaths[17]='/5/system/country';                              // GET -      // {"country":"Netherlands"}  
sArrayPaths[18]='/5/system/deviceid_encrypted';                   // GET -      // {"serialnumber_encrypted":"нєяєωιℓℓвєѕσмєєη¢яуρтє∂кєу"}  
sArrayPaths[19]='/5/system/epgsource';                            // GET -      // {"epgsource":"broadcast"}   
sArrayPaths[20]='/5/system/menulanguage';                         // GET -      // {"menulanguage":"Dutch"} 
sArrayPaths[21]='/5/system/model_encrypted';                      // GET -      // {"model_encrypted":"нєяєωιℓℓвєѕσмєєη¢яуρтє∂кєу"}  
sArrayPaths[22]='/5/system/name';                                 // GET -      // {"name":"SmartTV"}
sArrayPaths[23]='/5/system/softwareversion_encrypted';            // GET -      // {"softwareversion_encrypted":"нєяєωιℓℓвєѕσмєєη¢яуρтє∂кєу"}   
sArrayPaths[24]='/5/system/serialnumber_encrypted';               // GET -      // {"country":"нєяєωιℓℓвєѕσмєєη¢яуρтє∂кєу"}
sArrayPaths[25]='/5/system/timestamp';                            // GET -      // {"timestamp": "49348"}

var sArrayValues = [''];
sArrayValues[0]="test";
/***************\
| POST Function |###############################################################################################################################################################################
|
| Added own post function to make this module independent, this function will return an object.
|
\***********************************************************************************************************************************************************************************************/
exports.pushBufferobj = function(path, jObj, callback){

    var postOptions = {
        uri: 'http://' + '192.168.0.97' + ':' + 1925 + path,
        method: 'POST',
        body: jObj,
        json: true,
    };

    request.post( postOptions, function(err, res) {
        if ( err || res.statusCode != 200){ 
            console.log(err);
        }
    });
    //return result; 
}

/***************************\
| PreDefined POST Functions |####################################################################################################################################################################
|
| Some predefined functions, without callback
|
\***********************************************************************************************************************************************************************************************/
exports.pushBufferobjAmbilightCached = function (){               tv.pushBufferobj(sArrayPaths[2] ,{"layer1":{"bottom":{"0":{"b":0,"g":0,"r":0},"1":{"b":0,"g":0,"r":0}},"right":{"0":{"b":0,"g":0,"r":0},"1":{"b":0,"g":0,"r":0},"2":{"b":0,"g":0,"r":0},"3":{"b":0,"g":0,"r":0}},"left":{"0":{"b":0,"g":0,"r":0},"1":{"b":0,"g":0,"r":0},"2":{"b":0,"g":0,"r":0},"3":{"b":0,"g":0,"r":0}},"top":{"0":{"b":0,"g":0,"r":0},"1":{"b":0,"g":0,"r":0},"2":{"b":0,"g":0,"r":0},"3":{"b":0,"g":0,"r":0},"4":{"b":0,"g":0,"r":0},"5":{"b":0,"g":0,"r":0},"6":{"b":0,"g":0,"r":0},"7":{"b":0,"g":0,"r":0}}}}); }
exports.pushBufferobjAmbiLightLounge = function (){               tv.pushBufferobj(sArrayPaths[3] ,{"speed":0,"colordelta":{"brightness":0,"saturation":0,"hue":0},"color":{"brightness":0,"saturation":0,"hue":0},"mode":"Default"}); }
exports.pushBufferobjAmbiLightMode = function (){                 tv.pushBufferobj(sArrayPaths[5] ,{"current":"internal"}); }
exports.pushBufferobjAudioVolume = function (){                   tv.pushBufferobj(sArrayPaths[9] ,{"min":0,"current":20,"muted":true,"max":60}); }
exports.pushBufferobjInputPointer = function (){                  tv.pushBufferobj(sArrayPaths[11],{ "?????": "?????" }); }   //????
exports.pushBufferobjInputKeyStandby = function (){               tv.pushBufferobj(sArrayPaths[12],{ "key": "Standby" }); }
exports.pushBufferobjInputKeyBack = function (){                  tv.pushBufferobj(sArrayPaths[12],{ "key": "Back" }); }
exports.pushBufferobjInputKeyFind = function (){                  tv.pushBufferobj(sArrayPaths[12],{ "key": "Find" }); }
exports.pushBufferobjInputKeyRedColour = function (){             tv.pushBufferobj(sArrayPaths[12],{ "key": "RedColour" }); }
exports.pushBufferobjInputKeyGreenColour = function (){           tv.pushBufferobj(sArrayPaths[12],{ "key": "GreenColour" }); }
exports.pushBufferobjInputKeyYellowColour = function (){          tv.pushBufferobj(sArrayPaths[12],{ "key": "YellowColour" }); }
exports.pushBufferobjInputKeyBlueColour = function (){            tv.pushBufferobj(sArrayPaths[12],{ "key": "BlueColour" }); }
exports.pushBufferobjInputKeyHome = function (){                  tv.pushBufferobj(sArrayPaths[12],{ "key": "Home" }); }
exports.pushBufferobjInputKeyVolumeUp = function (){              tv.pushBufferobj(sArrayPaths[12],{ "key": "VolumeUp" }); }
exports.pushBufferobjInputKeyVolumeDown = function (){            tv.pushBufferobj(sArrayPaths[12],{ "key": "VolumeDown" }); }
exports.pushBufferobjInputKeyMute = function (){                  tv.pushBufferobj(sArrayPaths[12],{ "key": "Mute"  }); }
exports.pushBufferobjInputKeyOptions = function (){               tv.pushBufferobj(sArrayPaths[12],{ "key": "Options" }); }
exports.pushBufferobjInputKeyDot = function (){                   tv.pushBufferobj(sArrayPaths[12],{ "key": "Dot"    }); }
exports.pushBufferobjInputKeyDigit0 = function (){                tv.pushBufferobj(sArrayPaths[12],{ "key": "Digit0" }); }
exports.pushBufferobjInputKeyDigit1 = function (){                tv.pushBufferobj(sArrayPaths[12],{ "key": "Digit1" }); }
exports.pushBufferobjInputKeyDigit2 = function (){                tv.pushBufferobj(sArrayPaths[12],{ "key": "Digit2" }); }
exports.pushBufferobjInputKeyDigit3 = function (){                tv.pushBufferobj(sArrayPaths[12],{ "key": "Digit3" }); }
exports.pushBufferobjInputKeyDigit4 = function (){                tv.pushBufferobj(sArrayPaths[12],{ "key": "Digit4" }); }
exports.pushBufferobjInputKeyDigit5 = function (){                tv.pushBufferobj(sArrayPaths[12],{ "key": "Digit5" }); }
exports.pushBufferobjInputKeyDigit6 = function (){                tv.pushBufferobj(sArrayPaths[12],{ "key": "Digit6" }); }
exports.pushBufferobjInputKeyDigit7 = function (){                tv.pushBufferobj(sArrayPaths[12],{ "key": "Digit7" }); }
exports.pushBufferobjInputKeyDigit8 = function (){                tv.pushBufferobj(sArrayPaths[12],{ "key": "Digit8" }); }
exports.pushBufferobjInputKeyDigit9 = function (){                tv.pushBufferobj(sArrayPaths[12],{ "key": "Digit9" }); }
exports.pushBufferobjInputKeyInfo = function (){                  tv.pushBufferobj(sArrayPaths[12],{ "key": "Info" }); }
exports.pushBufferobjInputKeyCursorUp = function (){              tv.pushBufferobj(sArrayPaths[12],{ "key": "CursorUp" }); }
exports.pushBufferobjInputKeyCursorDown = function (){            tv.pushBufferobj(sArrayPaths[12],{ "key": "CursorDown" }); }
exports.pushBufferobjInputKeyCursorLeft = function (){            tv.pushBufferobj(sArrayPaths[12],{ "key": "CursorLeft" }); }
exports.pushBufferobjInputKeyCursorRight = function (){           tv.pushBufferobj(sArrayPaths[12],{ "key": "CursorRight" }); }
exports.pushBufferobjInputKeyConfirm = function (){               tv.pushBufferobj(sArrayPaths[12],{ "key": "Confirm" }); }
exports.pushBufferobjInputKeyNext = function (){                  tv.pushBufferobj(sArrayPaths[12],{ "key": "Next" }); }
exports.pushBufferobjInputKeyPrevious = function (){              tv.pushBufferobj(sArrayPaths[12],{ "key": "Previous" }); }
exports.pushBufferobjInputKeyAdjust = function (){                tv.pushBufferobj(sArrayPaths[12],{ "key": "Adjust" }); }
exports.pushBufferobjInputKeyWatchTV = function (){               tv.pushBufferobj(sArrayPaths[12],{ "key": "WatchTV" }); }
exports.pushBufferobjInputKeyViewmode = function (){              tv.pushBufferobj(sArrayPaths[12],{ "key": "Viewmode" }); }
exports.pushBufferobjInputKeyTeletext = function (){              tv.pushBufferobj(sArrayPaths[12],{ "key": "Teletext" }); }
exports.pushBufferobjInputKeySubtitle = function (){              tv.pushBufferobj(sArrayPaths[12],{ "key": "Subtitle" }); }
exports.pushBufferobjInputKeyChannelStepUp = function (){         tv.pushBufferobj(sArrayPaths[12],{ "key": "ChannelStepUp" }); }
exports.pushBufferobjInputKeyChannelStepDown = function (){       tv.pushBufferobj(sArrayPaths[12],{ "key": "ChannelStepDown" }); }
exports.pushBufferobjInputKeySource = function (){                tv.pushBufferobj(sArrayPaths[12],{ "key": "Source" }); }
exports.pushBufferobjInputKeyAmbilightOnOff = function (){        tv.pushBufferobj(sArrayPaths[12],{ "key": "AmbilightOnOff" }); }
exports.pushBufferobjInputKeyPlayPause = function (){             tv.pushBufferobj(sArrayPaths[12],{ "key": "PlayPause" }); }
exports.pushBufferobjInputKeyPause = function (){                 tv.pushBufferobj(sArrayPaths[12],{ "key": "Pause" }); }
exports.pushBufferobjInputKeyFastForward = function (){           tv.pushBufferobj(sArrayPaths[12],{ "key": "FastForward" }); }
exports.pushBufferobjInputKeyStop = function (){                  tv.pushBufferobj(sArrayPaths[12],{ "key": "Stop" }); }
exports.pushBufferobjInputKeyRewind = function (){                tv.pushBufferobj(sArrayPaths[12],{ "key": "Rewind" }); }
exports.pushBufferobjInputKeyRecord = function (){                tv.pushBufferobj(sArrayPaths[12],{ "key": "Record" }); }
exports.pushBufferobjInputKeyOnline = function (){                tv.pushBufferobj(sArrayPaths[12],{ "key": "Online" }); }
exports.pushBufferobjPowerstateOn = function (){                  tv.pushBufferobj(sArrayPaths[15],{ "powerstate":"On" }); }
exports.pushBufferobjPowerstateStandby = function (){             tv.pushBufferobj(sArrayPaths[15],{ "powerstate":"Standby" }); }



/**************\
| GET Function |#################################################################################################################################################################################
|
| Added own get function to make this module independent, this function will return an object.
|
\***********************************************************************************************************************************************************************************************/
exports.returnJSONObj = function(path){

    var getOptions = {
      hostname: host2,
      port: port2,
      path: path,
      method: 'GET',
      headers: {
        'Content-Type': 'text/html',
        'Content-Length': Buffer.byteLength("")
      }
    };

    var postion = 0;
    for (var i = 0; i < sArrayPaths.length; i++) {
        if (sArrayPaths[i] === getOptions.path){
            postion = i;
        }
    }

 
    var req = http.request(getOptions);                                                           // MAKE THE REQUEST
    var data = '';
    req.on('response', function(res){                           // when the response comes back
        res.setEncoding('utf-8');
        res.on('data', function(chunk){ data += JSON.stringify(chunk) });            // concat chunks
        res.on('end', function(){ 
          exports = sArrayValues[i] = data;
          fs.writeFileSync( "./tempdb" + postion, sArrayValues[i]);
        });
    })
    req.end();                                                  // end the request

    return JSON.parse((fs.readFileSync( "./tempdb" + postion, 'UTF8')));
    
 }

setInterval(function(){ 
  console.log(counter++)
console.log(tv.returnJSONObj(sArrayPaths[1]));
}, 4)

//console.log(tv.returnJSONObj(sArrayPaths[1]));
//fs.writeFileSync( "./db-tv.json", JSON.stringify(tv.returnJSONObjAll()) );
//console.log(tv.returnJSONObj(sArrayPaths[1]))


/**************************\
| PreDefined GET Functions |#####################################################################################################################################################################
|
| Some predefined get functions, this function will return an object.
|
\***********************************************************************************************************************************************************************************************/
exports.returnActivitiesTv = function (){                         tv.returnJSONObj(sArrayPaths[1] ,1 ); console.log(result[1]) ; };
exports.returnAmbilightCached = function (){                      tv.returnJSONObj(sArrayPaths[2] ,2 ); return result[2] ; };
exports.returnAmbilightLounge = function (){                      tv.returnJSONObj(sArrayPaths[3] ,3 ); return result[3] ; };
exports.returnAmbilightMeasured = function (){                    tv.returnJSONObj(sArrayPaths[4] ,4 ); return result[4] ; };
exports.returnAmbilightMode = function (){                        tv.returnJSONObj(sArrayPaths[5] ,5 ); return result[5] ; };
exports.returnAmbilightProcessed = function (){                   tv.returnJSONObj(sArrayPaths[6] ,6 ); return result[6] ; };
exports.returnAmbilightTopology = function (){                    tv.returnJSONObj(sArrayPaths[7] ,7 ); return result[7] ; };
exports.returnApplications = function (){                         tv.returnJSONObj(sArrayPaths[8] ,8 ); return result[8] ; };
exports.returnAudioVolume = function (){                          tv.returnJSONObj(sArrayPaths[9] ,9 ); return result[9] ; };
exports.returnChanneldbTv = function (){                          tv.returnJSONObj(sArrayPaths[10],10 ); return result[10]; };
exports.returnContext = function (){                              tv.returnJSONObj(sArrayPaths[11],11 ); return result[11]; };
exports.returnNetworkDevices = function (){                       tv.returnJSONObj(sArrayPaths[14],14 ); return result[14]; };
exports.returnPowerstate = function (){                           tv.returnJSONObj(sArrayPaths[15],15 ); return result[15]; };
exports.returnSystem = function (){                               tv.returnJSONObj(sArrayPaths[16],16 ); return result[16]; };
exports.returnSystemCountry = function (){                        tv.returnJSONObj(sArrayPaths[17],17 ); return result[17]; };
exports.returnSystemDeviceIdEncrypted = function (){              tv.returnJSONObj(sArrayPaths[18],18 ); return result[18]; };
exports.returnSystemEpgsource = function (){                      tv.returnJSONObj(sArrayPaths[19],19 ); return result[19]; };
exports.returnSystemMenulanguage = function (){                   tv.returnJSONObj(sArrayPaths[20],20 ); return result[20]; };
exports.returnSystemModelEncrypted = function (){                 tv.returnJSONObj(sArrayPaths[21],21 ); return result[21]; };
exports.returnSystemName = function (){                           tv.returnJSONObj(sArrayPaths[22],22 ); return result[22]; };
exports.returnSystemSoftwareversionEncrypted = function (){       tv.returnJSONObj(sArrayPaths[23],23 ); return result[23]; };
exports.returnSystemSerialnumberEncrypted = function (){          tv.returnJSONObj(sArrayPaths[24],24 ); return result[24]; };
exports.returnSystemTimeStamp = function (){                      tv.returnJSONObj(sArrayPaths[25],25 ); return result[25]; };



/****************************\
| PreDefined GETALL Function |###############################################################################################################################################################################
|
| Returns an JSON object with all available values included
|
\***********************************************************************************************************************************************************************************************************/
exports.returnJSONObjAll = function(){

    var oDb = {};

    oDb.activities          = tv.returnActivitiesTv                  ();
    oDb.ambilight = {};                                                                    
    oDb.ambilight.cached    = tv.returnAmbilightCached               ();
    oDb.ambilight.lounge    = tv.returnAmbilightLounge               ();
    oDb.ambilight.measured  = tv.returnAmbilightMeasured             ();
    oDb.ambilight.mode      = tv.returnAmbilightMode                 ();
    oDb.ambilight.processed = tv.returnAmbilightProcessed            ();
    oDb.ambilight.topology  = tv.returnAmbilightTopology             ();
    oDb.audio = {};                                                                          
    oDb.audio.volume        = tv.returnAudioVolume                   ();
    oDb.channeldb = {};                                                                  
    oDb.channeldb.tv        = tv.returnChanneldbTv                   ();
    oDb.context             = tv.returnContext                       ();
    oDb.network = {};                
    oDb.network.devices     = tv.returnNetworkDevices                ();
    oDb.powersstate         = tv.returnPowerstate                    ();
    oDb.system              = tv.returnSystem                        ();

  //combine later
  //oDb.system.epgsource    = tv.returnSystemEpgsource               ();
    oDb.epgsource           = tv.returnSystemEpgsource               ();

  //combine later
  //oDb.system.timestamp    = tv.returnSystemTimeStamp               ();
    oDb.timestamp           = tv.returnSystemTimeStamp               ();

    console.log(oDb);
    return oDb;
}



/****************************\
| PreDefined GETALL Function |###############################################################################################################################################################################
|
| Returns an JSON db file with all available values included
|
\***********************************************************************************************************************************************************************************************************/
exports.returnJSONObjAllToDb = function(){
  //fs.writeFileSync( pathprivate + "./db-tv.json", JSON.stringify(tv.returnJSONObjAll()) );
  fs.writeFileSync( "./db-tv.json", JSON.stringify(tv.returnJSONObjAll()) );
};


module.exports = result;


